;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A Test Game for a Math Package
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

(<= (base (test ?task ?result))
    (task ?task)
    (result ?result))
(base finished)

(<= (input robot (run ?task))
    (task ?task))
(input robot quit)

(<= (init (test ?task waiting))
    (task ?task))

(<= (legal robot (run ?task))
    (true (test ?task waiting)))
(<= (legal robot quit)
    (not running))

(<= (next (test ?task1 ?result))
    (does robot (run ?task2))
    (true (test ?task1 ?result))
    (distinct ?task1 ?task2))

(<= (next (test ?task success))
    (does robot (run ?task))
    (success ?task))

(<= (next (test ?task failure))
    (does robot (run ?task))
    (not (success ?task)))

(<= (next finished)
    (does robot quit))
    
(<= terminal
    (true finished))

(<= (goal robot 100)
    (true (test ?name success)))

(<= (goal robot 0)
    (not (goal robot 100)))

;;; Tasks to test operations

(task successor)
(task num_b)
(task shiftleft)
(task shiftright)
(task binary_adder)
(task lt)
(task convert_radix)
;(task adder)
;(task multiplier)
(task plus)
(task minus)
;(task multiplication)

(<= (success successor)
    (succ 1 0 1 0 1 0 1 1)
    (succ 1 0 1 f 1 0 2 0)
    (not (succ 1 0 0 2 1 0 0 4)))

(<= (success num_b)
    (num_b i o o i o i i o o i i o i o i o)
    (num_b i i o o i o o i i i o i i o i i))

(<= (success convert_radix)
    (conv_radix o i i o i i o o o i o i i i o o 6 c 5 c)
    (conv_radix i o i o o o o i i o i o i o o i a 1 a 9))

(<= (success shiftleft)
    (sl o i i o i i o o o i o i i i o o 0 o i i o i i o o o i o i i i o o)
    (sl o i i o i i o o o i o i i i o o 1 i i o i i o o o i o i i i o o o)
    (sl i o i o o o o i i o i o i o o i 2 i o o o o i i o i o i o o i o o)
    (sl i o i o o o o i i o i o i o o i 5 o o i i o i o i o o i o o o o o))
    
(<= (success shiftright)
    (sr o i i o i i o o o i o i i i o o 0 o i i o i i o o o i o i i i o o)
    (sr o i i o i i o o o i o i i i o o 1 o o i i o i i o o o i o i i i o)
    (sr i o i o o o o i i o i o i o o i 2 o o i o i o o o o i i o i o i o)
    (sr i o i o o o o i i o i o i o o i 5 o o o o o i o i o o o o i i o i))

(<= (success binary_adder)
    (adder o o o o o)
    (adder o i o i o)
    (adder i o o i o)
    (adder o i i o i)
    (adder i i i i i))

(<= (success adder)
    (adder 0 0 0 0 0)
    (adder 1 1 0 2 0)
    (adder 1 f 0 0 1)
    (adder 1 f f f 1)
    (adder f f f d 2)
    (not (adder 4 a 4 3 1))
    (not (adder 1 k 0 0 1)))

(<= (success multiplier)
    (multiplier 0 0 0 0)
    (multiplier 1 1 0 1)
    (multiplier f 2 1 e)
    (multiplier f f e 1)
    (not (multiplier 4 a 8 b))
    (not (multiplier n 6 n 4)))

(<= (success lt)
    (lt 0 0 0 0 0 0 0 1)
    (lt 0 0 0 0 0 0 4 0)
    (not (lt 8 4 2 0 4 0 2 a)))

(<= (success plus)
    (plus 0 0 0 0 0 0 0 0 0 0 0 0 o)
    (plus f 2 8 4 0 2 c 5 f 5 4 9 o)
    (plus 0 0 0 0 f f f f f f f f o)
    (not (plus 2 5 6 3 3 4 0 4 5 3 2 0 o))
    (not (plus 2 f 8 g m 33 a 2 0 3 4 b o))
    (plus f 3 0 4 b a 2 0 a d 2 4 i))

(<= (success minus)
    (minus 0 0 0 0 0 0 0 0 0 0 0 0 o)
    (minus 0 f 0 1 0 e 0 1 0 1 0 0 o)
    (not (minus 2 4 8 3 1 9 b c 3 a f 0 i))
    (not (minus g a 3 0 j t 0 0 h b a c o))
    (minus 0 0 0 1 f f f f 0 0 0 2 i))

(<= (success multiplication)
    (mul 0 0 0 0 0 0 0 0 0 0 0 0)
    (mul 0 1 a 4 0 0 4 a 8 b e 8)
    (not (mul 2 5 2 8 0 0 3 a 8 b c e))
    (not (mul g a 7 0 3 b a k j j b c))
    (mul b 5 0 3 f 3 a a nan nan nan nan))    

;;; General Functions

(<= running
    (true (test ?name waiting)))

(result waiting)
(result success)
(result failure)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A Common Package of Mathematics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Notation
;;;    a.b = ?i1 ?i2 ... (Let (a ?i1 ?i2 ...))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Numbers: 0-65535
;;; - Hexadecimal 4 digit (16bit)
;;;    (num i.3 i.2 i.1 i.0) = i.0 * 2^4 + i.1 * 2^8 + i.2 * 2^12 + i.3 * 2^16
;;;    (num nan nan nan nan) = NaN (Not a number including overflow)
;;;    (minnum num.i) -> num.i == Zero
;;;    (maxnum num.i) -> num.i == 0xFFFF
;;;    (nan num.i) -> num.i == NaN
;;;
;;; Arithmetic Operations: + - * / %
;;;    (plus num.a num.b num.sum)     -> num.a + num.b = num.sum
;;;    (minus num.a num.b num.diff)   -> num.a - num.b = num.diff
;;;    (mul num.a num.b num.product)  -> num.a * num.b = num.product
;;;    (div num.a num.b num.quotient) -> num.a / num.b = num.quotient
;;;    (rem num.a num.b num.surplus)  -> num.a % num.b = num.surplus
;;;
;;; Comparison Operations: < > <= >= == !=
;;;    (lt num.a num.b) -> num.a < num.b
;;;    (gt num.a num.b) -> num.a > num.b
;;;    (le num.a num.b) -> num.a <= num.b
;;;    (ge num.a num.b) -> num.a >= num.b
;;;    (eq num.a num.b) -> num.a == num.b
;;;    (ne num.a num.b) -> num.a != num.b
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Hex Digits

(i 0)
(i 1)
(i 2)
(i 3)
(i 4)
(i 5)
(i 6)
(i 7)
(i 8)
(i 9)
(i a)
(i b)
(i c)
(i d)
(i e)
(i f)

;;; Binary Digits

(binary o)
(binary i)

;;; Numbers / NaN

(<= (num ?i3 ?i2 ?i1 ?i0)
    (i ?i0)
    (i ?i1)
    (i ?i2)
    (i ?i3))
(num nan nan nan nan)

(<= (num_b ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0)
    (binary ?b15)
    (binary ?b14)
    (binary ?b13)
    (binary ?b12)
    (binary ?b11)
    (binary ?b10)
    (binary ?b9)
    (binary ?b8)
    (binary ?b7)
    (binary ?b6)
    (binary ?b5)
    (binary ?b4)
    (binary ?b3)
    (binary ?b2)
    (binary ?b1)
    (binary ?b0))

(radix_table o o o o 0)
(radix_table o o o i 1)
(radix_table o o i o 2)
(radix_table o o i i 3)
(radix_table o i o o 4)
(radix_table o i o i 5)
(radix_table o i i o 6)
(radix_table o i i i 7)
(radix_table i o o o 8)
(radix_table i o o i 9)
(radix_table i o i o a)
(radix_table i o i i b)
(radix_table i i o o c)
(radix_table i i o i d)
(radix_table i i i o e)
(radix_table i i i i f)

(minnum 0 0 0 0)
(maxnum f f f f)
(nan nan nan nan nan)

;;; Successors

(succi 0 1)
(succi 1 2)
(succi 2 3)
(succi 3 4)
(succi 4 5)
(succi 5 6)
(succi 6 7)
(succi 7 8)
(succi 8 9)
(succi 9 a)
(succi a b)
(succi b c)
(succi c d)
(succi d e)
(succi e f)

(<= (succ ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?j0)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?j0)
    (succi ?i0 ?j0))
(<= (succ ?i3 ?i2 ?i1 f ?i3 ?i2 ?j1 0)
    (num ?i3 ?i2 ?i1 f)
    (num ?i3 ?i2 ?j1 0)
    (succi ?i1 ?j1))
(<= (succ ?i3 ?i2 f f ?i3 ?j2 0 0)
    (num ?i3 ?i2 f f)
    (num ?i3 ?j2 0 0)
    (succi ?i2 ?j2))
(<= (succ ?i3 f f f ?j3 0 0 0)
    (num ?i3 f f f)
    (num ?j3 0 0 0)
    (succi ?i3 ?j3))

;; Logical Operations

(_or o o o)
(_or o i i)
(_or i o i)
(_or i i i)

(_and o o o)
(_and o i o)
(_and i o o)
(_and i i i)

(_not o i)
(_not i o)

(_nor o o i)
(_nor o i o)
(_nor i o o)
(_nor i i o)

(_nand o o i)
(_nand o i i)
(_nand i o i)
(_nand i i o)

(_xor o o o)
(_xor o i i)
(_xor i o i)
(_xor i i o)

;; Converters

; Radix Converter (binary <-> hex)

(<= (conv_radix ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0 ?n3 ?n2 ?n1 ?n0)
    (radix_table ?b15 ?b14 ?b13 ?b12 ?n3)
    (radix_table ?b11 ?b10 ?b9 ?b8 ?n2)
    (radix_table ?b7 ?b6 ?b5 ?b4 ?n1)
    (radix_table ?b3 ?b2 ?b1 ?b0 ?n0))    

;; Shift Operations

; Logical Right-Shift
(<= (sr ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0 0 ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0)
    (num_b ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0))
(<= (sr ?a15 ?a14 ?a13 ?a12 ?a11 ?a10 ?a9 ?a8 ?a7 ?a6 ?a5 ?a4 ?a3 ?a2 ?a1 ?a0 ?n ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0)
    (binary ?a0)
    (succi ?nm ?n)
    (sr o ?a15 ?a14 ?a13 ?a12 ?a11 ?a10 ?a9 ?a8 ?a7 ?a6 ?a5 ?a4 ?a3 ?a2 ?a1 ?nm ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0))

; Logical Left-Shift
(<= (sl ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0 0 ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0)
    (num_b ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0))
(<= (sl ?a15 ?a14 ?a13 ?a12 ?a11 ?a10 ?a9 ?a8 ?a7 ?a6 ?a5 ?a4 ?a3 ?a2 ?a1 ?a0 ?n ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0)
    (succi ?nm ?n)
    (binary ?a15)
    (sl ?a14 ?a13 ?a12 ?a11 ?a10 ?a9 ?a8 ?a7 ?a6 ?a5 ?a4 ?a3 ?a2 ?a1 ?a0 o ?nm ?b15 ?b14 ?b13 ?b12 ?b11 ?b10 ?b9 ?b8 ?b7 ?b6 ?b5 ?b4 ?b3 ?b2 ?b1 ?b0))

;;; Arithmetic Operations

; 四則演算は暗黙的に16進数から2進数に変換して処理することにしよう

;; Full Adder (Binary)
; (adder ?a ?b ?x ?s ?c) -> ?a + ?b + ?x = ?c?s
; ?a: input A | ?b: input B | ?x: carry-input | ?s: sum-output | ?c: carry-output

(<= (adder ?a ?b ?x ?s ?c)
    (_xor ?a ?b ?s1)
    (_xor ?s1 ?x ?s)
    (_and ?a ?b ?c1)
    (_and ?s1 ?x ?c2)
    (_or ?c1 ?c2 ?c))

;; Comparator
; (comparator ?i ?j) -> (?i < ?j)

(<= (comparator ?i ?j)
    (succi ?i ?j))
(<= (comparator ?h ?j)
    (succi ?i ?j)
    (comparator ?h ?i))

;;; Comparison Operations

;; i < j

(<= (lt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (comparator ?i3 ?j3)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?j3 ?j2 ?j1 ?j0))
(<= (lt ?i3 ?i2 ?i1 ?i0 ?i3 ?j2 ?j1 ?j0)
    (comparator ?i2 ?j2)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?j2 ?j1 ?j0))
(<= (lt ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?j1 ?j0)
    (comparator ?i1 ?j1)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?j1 ?j0))
(<= (lt ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?j0)
    (comparator ?i0 ?j0)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?j0))

;; i <= j
(<= (le ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0))
(<= (le ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))

;; i > j
(<= (gt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0))

;; i >= j
(<= (ge ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (gt ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0))

;; i == j
(<= (eq ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))

;; i != j
(<= (ne ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (not (eq ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0))
    (num ?i3 ?i2 ?i1 ?i0))

;; Addition
; i + j = s
; (?overflow == i) -> sum overflows

(<= (plus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?overflow)
    (conv_radix ?ib15 ?ib14 ?ib13 ?ib12 ?ib11 ?ib10 ?ib9 ?ib8 ?ib7 ?ib6 ?ib5 ?ib4 ?ib3 ?ib2 ?ib1 ?ib0 ?i3 ?i2 ?i1 ?i0)
    (conv_radix ?jb15 ?jb14 ?jb13 ?jb12 ?jb11 ?jb10 ?jb9 ?jb8 ?jb7 ?jb6 ?jb5 ?jb4 ?jb3 ?jb2 ?jb1 ?jb0 ?j3 ?j2 ?j1 ?j0)
    (conv_radix ?sb15 ?sb14 ?sb13 ?sb12 ?sb11 ?sb10 ?sb9 ?sb8 ?sb7 ?sb6 ?sb5 ?sb4 ?sb3 ?sb2 ?sb1 ?sb0 ?s3 ?s2 ?s1 ?s0)
    (adder ?ib0 ?jb0 o ?sb0 ?cb1)
    (adder ?ib1 ?jb1 ?cb1 ?sb1 ?cb2)
    (adder ?ib2 ?jb2 ?cb2 ?sb2 ?cb3)
    (adder ?ib3 ?jb3 ?cb3 ?sb3 ?cb4)
    (adder ?ib4 ?jb4 ?cb4 ?sb4 ?cb5)
    (adder ?ib5 ?jb5 ?cb5 ?sb5 ?cb6)
    (adder ?ib6 ?jb6 ?cb6 ?sb6 ?cb7)
    (adder ?ib7 ?jb7 ?cb7 ?sb7 ?cb8)
    (adder ?ib8 ?jb8 ?cb8 ?sb8 ?cb9)
    (adder ?ib9 ?jb9 ?cb9 ?sb9 ?cb10)
    (adder ?ib10 ?jb10 ?cb10 ?sb10 ?cb11)
    (adder ?ib11 ?jb11 ?cb11 ?sb11 ?cb12)
    (adder ?ib12 ?jb12 ?cb12 ?sb12 ?cb13)
    (adder ?ib13 ?jb13 ?cb13 ?sb13 ?cb14)
    (adder ?ib14 ?jb14 ?cb14 ?sb14 ?cb15)
    (adder ?ib15 ?jb15 ?cb15 ?sb15 ?overflow))

;(<= (plus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
;    (adder ?i0 ?j0 0 ?s0 ?c0)
;    (adder ?i1 ?j1 ?c0 ?s1 ?c1)
;    (adder ?i2 ?j2 ?c1 ?s2 ?c2)
;    (adder ?i3 ?j3 ?c2 ?s3 0))
;(<= (plus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 nan nan nan nan)
;    (adder ?i0 ?j0 0 ?s0 ?c0)
;    (adder ?i1 ?j1 ?c0 ?s1 ?c1)
;    (adder ?i2 ?j2 ?c1 ?s2 ?c2)
;    (adder ?i3 ?j3 ?c2 ?s3 ?c3)
;    (distinct c3 0))
;(<= (plus ?i3 ?i2 ?i1 ?i0 nan nan nan nan nan nan nan nan)
;    (num ?i3 ?i2 ?i1 ?i0))
;(<= (plus nan nan nan nan ?j3 ?j2 ?j1 ?j0 nan nan nan nan)
;    (num ?j3 ?j2 ?j1 ?j0))

;; Subtraction
; i - j = s
; (?overflow == i) -> the difference overflows

(<= (minus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?overflow)
    (plus ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?i3 ?i2 ?i1 ?i0 ?overflow))

; ここまで実装&テスト済み

;; i * j = s

;(<= (mul ?i3 ?i2 ?i1 ?i0 0 0 0 0 0 0 0 0)
;    (num ?i3 ?i2 ?i1 ?i0))
;(<= (mul ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0 ?i3 ?i2 ?i1 ?i0)
;    (succ ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0))
;(<= (mul ?i3 ?i2 ?i1 ?i0 ?ipp3 ?ipp2 ?ipp1 ?ipp0 ?id3 ?id2 ?id1 ?id0)
;    (plus ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0 ?id3 ?id2 ?id1 ?id0)
;    (succ ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0)
;    (succ ?ip3 ?ip2 ?ip1 ?ip0 ?ipp3 ?ipp2 ?ipp1 ?ipp0))
;(<= (mul ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
;    (plus ?i3 ?i2 ?i1 ?i0 ?jp3 ?jp2 ?jp1 ?jp0 ?sa3 ?sa2 ?sa1 ?sa0)
;    (plus ?s3 ?s2 ?s1 ?s0 ?i3 ?i2 ?i1 ?i0 ?sa3 ?sa2 ?sa1 ?sa0)
;    (succ ?j3 ?j2 ?j1 ?j0 ?jp3 ?jp2 ?jp1 ?jp0))

;; i / j = s
(<= (div ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (mul ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?q3 ?q2 ?q1 ?q0)
    (plus ?q3 ?q2 ?q1 ?q0 ?r3 ?r2 ?r1 ?r0 ?i3 ?i2 ?i1 ?i0)
    (not(nan ?r3 ?r2 ?r1 ?r0))
    (lt ?r3 ?r2 ?r1 ?r0 ?s3 ?s2 ?s1 ?s0)
    (not(minnum ?j3 ?j2 ?j1 ?j0)))
(<= (div ?i3 ?i2 ?i1 ?i0 0 0 0 0 nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;; i % j = r
(<= (rem ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?r3 ?r2 ?r1 ?r0)
    (mul ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?q3 ?q2 ?q1 ?q0)
    (plus ?q3 ?q2 ?q1 ?q0 ?r3 ?r2 ?r1 ?r0 ?i3 ?i2 ?i1 ?i0)
    (not(nan ?r3 ?r2 ?r1 ?r0))
    (lt ?r3 ?r2 ?r1 ?r0 ?s3 ?s2 ?s1 ?s0)
    (not(minnum ?j3 ?j2 ?j1 ?j0)))
(<= (rem ?i3 ?i2 ?i1 ?i0 0 0 0 0 nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

