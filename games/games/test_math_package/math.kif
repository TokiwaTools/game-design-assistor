;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A Test Game for a Math Package
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

(<= (base (test ?task ?result))
    (task ?task)
    (result ?result))
(base finished)

(<= (input robot (run ?task))
    (task ?task))
(input robot quit)

(<= (init (test ?task waiting))
    (task ?task))

(<= (legal robot (run ?task))
    (true (test ?task waiting)))
(<= (legal robot quit)
    (not running))

(<= (next (test ?task1 ?result))
    (does robot (run ?task2))
    (true (test ?task1 ?result))
    (distinct ?task1 ?task2))

(<= (next (test ?task success))
    (does robot (run ?task))
    (success ?task))

(<= (next (test ?task failure))
    (does robot (run ?task))
    (not (success ?task)))

(<= (next finished)
    (does robot quit))
    
(<= terminal
    (true finished))

(<= (goal robot 100)
    (true (test ?name success)))

(<= (goal robot 0)
    (not (goal robot 100)))

;;; Tasks to test operations

(task successor1)
(<= (success successor1)
    (succ 1 0 1 0 1 0 1 1)
    (succ 1 0 1 f 1 0 2 0))
(task successor2)
(<= (success successor2)
    (not (succ 1 0 0 2 1 0 0 4)))

(task adder0)
(<= (success adder0)
    (adder 0 0 0 0 0))
(task adder1)
(<= (success adder1)
    (adder 1 1 0 2 0))
(task adder2)
(<= (success adder2)
    (adder 1 f 0 0 1))
(task adder3)
(<= (success adder3)
    (adder 1 f f f 1))
(task adder4)
(<= (success adder4)
    (adder f f f d 2))
(task adder5)
(<= (success adder5)
    (not (adder 4 a 4 3 1)))
(task adder6)
(<= (success adder6)
    (not (adder 1 k 0 0 1)))

;(task lt)
;(<= (success lt)
;    (lt 0 0 0 0 0 0 0 1)
;    (lt 0 0 0 0 0 0 4 0))

;(task plus)
;(<= (success plus)
;    (plus 0 0 0 0 0 0 0 0 0 0 0 0)
;    (plus 0 0 1 0 0 0 0 5 0 0 1 5))

;(task minus)
;(<= (success minus)
;    (minus 0 0 0 0 0 0 0 0 0 0 0 0)
;    (minus 0 0 0 1 0 0 0 1 0 0 0 0)
;    (minus 0 f 0 1 0 e 0 1 0 1 0 0)
;    (minus 0 0 0 1 f f f f nan nan nan nan))

;;; General Functions

(<= running
    (true (test ?name waiting)))

(result waiting)
(result success)
(result failure)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A Common Package of Mathematics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Functions
;;;     Notation
;;;         a.b = ?i1 ?i2 ... (Let (a ?i1 ?i2 ...))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Numbers: 0-65535
;;;    (num i.4 i.3 i.2 i.1) = i.1*2^4 + i.2*2^8 + i.3*2^12 + i.4*2^16
;;; - Hexadecimal 4 digit (16bit)
;;;    (num nan nan nan nan) = NaN (Not a number including overflow)
;;;    (zero i.4 i.3 i.2 i.1) = Zero
;;;
;;; Arithmetic Operations: + - * / %
;;;    (plus num.a num.b num.sum)     -> num.a + num.b = num.sum
;;;    (minus num.a num.b num.diff)   -> num.a - num.b = num.diff
;;;    (mul num.a num.b num.product)  -> num.a * num.b = num.product
;;;    (div num.a num.b num.quotient) -> num.a / num.b = num.quotient
;;;    (rem num.a num.b num.surplus)  -> num.a % num.b = num.surplus
;;;
;;; Comparison Operations: < > <= >= == !=
;;;    (lt num.a num.b) -> num.a < num.b
;;;    (gt num.a num.b) -> num.a > num.b
;;;    (le num.a num.b) -> num.a <= num.b
;;;    (ge num.a num.b) -> num.a >= num.b
;;;    (eq num.a num.b) -> num.a == num.b
;;;    (ne num.a num.b) -> num.a != num.b
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Digit

(i 0)
(i 1)
(i 2)
(i 3)
(i 4)
(i 5)
(i 6)
(i 7)
(i 8)
(i 9)
(i a)
(i b)
(i c)
(i d)
(i e)
(i f)

;;; Numbers / NaN

(<= (num ?i3 ?i2 ?i1 ?i0)
    (i ?i0)
    (i ?i1)
    (i ?i2)
    (i ?i3))
(num nan nan nan nan)

;;; Successors

(succi 0 1)
(succi 1 2)
(succi 2 3)
(succi 3 4)
(succi 4 5)
(succi 5 6)
(succi 6 7)
(succi 7 8)
(succi 8 9)
(succi 9 a)
(succi a b)
(succi b c)
(succi c d)
(succi d e)
(succi e f)

(<= (succ ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?j0)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?j0)
    (succi ?i0 ?j0))
(<= (succ ?i3 ?i2 ?i1 f ?i3 ?i2 ?j1 0)
    (num ?i3 ?i2 ?i1 f)
    (num ?i3 ?i2 ?j1 0)
    (succi ?i1 ?j1))
(<= (succ ?i3 ?i2 f f ?i3 ?j2 0 0)
    (num ?i3 ?i2 f f)
    (num ?i3 ?j2 0 0)
    (succi ?i2 ?j2))
(<= (succ ?i3 f f f ?j3 0 0 0)
    (num ?i3 f f f)
    (num ?j3 0 0 0)
    (succi ?i3 ?j3))

;;; Arithmetic Operations

(<= (adder ?a 0 0 ?a 0)
    (i ?a))
(<= (adder f ?b 0 ?bm 1)
    (succi ?bm ?b))
(adder f f 1 f 1)
(<= (adder f f ?x ?xmm 2)
    (succi ?xmm ?xm)
    (succi ?xm ?x))

(<= (adder ?a0 ?b0 ?x0 ?s0 ?c0)
    (succi ?b0 ?b0p)
    (succi ?x0m ?x0)
    (adder ?a0 ?b0p ?x0m ?s0 ?c0))
(<= (adder ?a0 ?b0 ?x0 ?s0 ?c0)
    (succi ?a0 ?a0p)
    (succi ?b0m ?b0)
    (adder ?a0p ?b0m ?x0 ?s0 ?c0))

;; i + j = s
(<= (plus ?i3 ?i2 ?i1 ?i0 0 0 0 0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))
(<= (plus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (plus ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0 ?s3 ?s2 ?s1 ?s0))
(<= (plus ?n3 ?n2 ?n1 ?n0 ?m3 ?m2 ?m1 ?m0 ?s3 ?s2 ?s1 ?s0)
    (succ ?n3 ?n2 ?n1 ?n0 ?np3 ?np2 ?np1 ?np0)
    (succ ?mm3 ?mm2 ?mm1 ?mm0 ?m3 ?m2 ?m1 ?m0)
    (plus ?np3 ?np2 ?np1 ?np0 ?mm3 ?mm2 ?mm1 ?mm0 ?s3 ?s2 ?s1 ?s0))
(<= (plus ?i3 ?i2 ?i1 ?i0 nan nan nan nan nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;; i - j = s
(<= (minus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (plus ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?i3 ?i2 ?i1 ?i0))

;; i * j = s
(<= (mul 0 0 0 0 ?j3 ?j2 ?j1 ?j0 0 0 0 0)
    (num ?j3 ?j2 ?j1 ?j0))
(<= (mul ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0 ?i3 ?i2 ?i1 ?i0)
    (succ ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0))
(<= (mul ?i3 ?i2 ?i1 ?i0 ?ipp3 ?ipp2 ?ipp1 ?ipp0 ?id3 ?id2 ?id1 ?id0)
    (plus ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0 ?id3 ?id2 ?id1 ?id0)
    (succ ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0)
    (succ ?ip3 ?ip2 ?ip1 ?ip0 ?ipp3 ?ipp2 ?ipp1 ?ipp0))
(<= (mul ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (plus ?i3 ?i2 ?i1 ?i0 ?jp3 ?jp2 ?jp1 ?jp0 ?sa3 ?sa2 ?sa1 ?sa0)
    (plus ?s3 ?s2 ?s1 ?s0 ?i3 ?i2 ?i1 ?i0 ?sa3 ?sa2 ?sa1 ?sa0)
    (succ ?j3 ?j2 ?j1 ?j0 ?jp3 ?jp2 ?jp1 ?jp0))

;; i / j = s
(<= (div ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (mul ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?q3 ?q2 ?q1 ?q0)
    (plus ?q3 ?q2 ?q1 ?q0 ?r3 ?r2 ?r1 ?r0 ?i3 ?i2 ?i1 ?i0)
    (ne ?r3 ?r2 ?r1 ?r0 nan nan nan nan)
    (lt ?r3 ?r2 ?r1 ?r0 ?s3 ?s2 ?s1 ?s0)
    (ne ?j3 ?j2 ?j1 ?j0 0 0 0 0))
(<= (div ?i3 ?i2 ?i1 ?i0 0 0 0 0 nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;; i % j = r
(<= (rem ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?r3 ?r2 ?r1 ?r0)
    (mul ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?q3 ?q2 ?q1 ?q0)
    (plus ?q3 ?q2 ?q1 ?q0 ?r3 ?r2 ?r1 ?r0 ?i3 ?i2 ?i1 ?i0)
    (ne ?r3 ?r2 ?r1 ?r0 nan nan nan nan)
    (lt ?r3 ?r2 ?r1 ?r0 ?s3 ?s2 ?s1 ?s0)
    (ne ?j3 ?j2 ?j1 ?j0 0 0 0 0))
(<= (rem ?i3 ?i2 ?i1 ?i0 0 0 0 0 nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;;; Comparison Operations

;; i < j
(<= (lt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (succ ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0))
(<= (lt ?h3 ?h2 ?h1 ?h0 ?j3 ?j2 ?j1 ?j0)
    (succ ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?h3 ?h2 ?h1 ?h0 ?i3 ?i2 ?i1 ?i0))

;; i <= j
(<= (le ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0))
(<= (le ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))

;; i > j
(<= (gt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0))

;; i >= j
(<= (ge ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (gt ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0))

;; i == j
(<= (eq ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))

;; i != j
(<= (ne ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (not (eq ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0))
    (num ?i3 ?i2 ?i1 ?i0))

