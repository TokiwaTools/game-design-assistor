;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A Test Game for a Math Package
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

(<= (base (test ?task ?result))
    (task ?task)
    (result ?result))
(base finished)

(<= (input robot (run ?task))
    (task ?task))
(input robot quit)

(<= (init (test ?task waiting))
    (task ?task))

(<= (legal robot (run ?task))
    (true (test ?task waiting)))
(<= (legal robot quit)
    (not running))

(<= (next (test ?task1 ?result))
    (does robot (run ?task2))
    (true (test ?task1 ?result))
    (distinct ?task1 ?task2))

(<= (next (test ?task success))
    (does robot (run ?task))
    (success ?task))

(<= (next (test ?task failure))
    (does robot (run ?task))
    (not (success ?task)))

(<= (next finished)
    (does robot quit))
    
(<= terminal
    (true finished))

(<= (goal robot 100)
    (true (test ?name success)))

(<= (goal robot 0)
    (not (goal robot 100)))

;;; Tasks to test operations

(task successor)
(task lt)
(task adder)
(task plus)
(task minus)

(<= (success successor)
    (succ 1 0 1 0 1 0 1 1)
    (succ 1 0 1 f 1 0 2 0)
    (not (succ 1 0 0 2 1 0 0 4)))

(<= (success adder)
    (adder 0 0 0 0 0)
    (adder 1 1 0 2 0)
    (adder 1 f 0 0 1)
    (adder 1 f f f 1)
    (adder f f f d 2)
    (not (adder 4 a 4 3 1))
    (not (adder 1 k 0 0 1)))

(<= (success lt)
    (lt 0 0 0 0 0 0 0 1)
    (lt 0 0 0 0 0 0 4 0)
    (not (lt 8 4 2 0 4 0 2 a)))

(<= (success plus)
    (plus 0 0 0 0 0 0 0 0 0 0 0 0)            ;zero
    (plus f 2 8 4 0 2 c 5 f 5 4 9)            ;basic
    (plus 0 0 0 0 f f f f f f f f)            ;slowest
    (not (plus 2 5 6 3 3 4 0 4 5 3 2 0))      ;miss
    (not (plus 2 f 8 g m 33 a 2 0 3 4 b))     ;invalid function 
    (plus f 3 0 4 b a 2 0 nan nan nan nan))   ;NaN

(<= (success minus)
    (minus 0 0 0 0 0 0 0 0 0 0 0 0)
    (minus 0 f 0 1 0 e 0 1 0 1 0 0)
    (not (minus 2 4 8 3 1 9 b c 3 a f 0))
    (not (minus g a 3 0 j t 0 0 h b a c))
    (minus 0 0 0 1 f f f f nan nan nan nan))

;(<= (success multiplication)
;    (mul 0 0 0 0 0 0 0 0 0 0 0 0)
;    (mul 0 1 a 4 0 0 4 a 8 b e 8)
;    (mul 
    

;;; General Functions

(<= running
    (true (test ?name waiting)))

(result waiting)
(result success)
(result failure)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A Common Package of Mathematics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Notation
;;;    a.b = ?i1 ?i2 ... (Let (a ?i1 ?i2 ...))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Numbers: 0-65535
;;; - Hexadecimal 4 digit (16bit)
;;;    (num i.3 i.2 i.1 i.0) = i.0 * 2^4 + i.1 * 2^8 + i.2 * 2^12 + i.3 * 2^16
;;;    (num nan nan nan nan) = NaN (Not a number including overflow)
;;;    (minnum num.i) -> num.i == Zero
;;;    (maxnum num.i) -> num.i == 0xFFFF
;;;    (nan num.i) -> num.i == NaN
;;;
;;; Arithmetic Operations: + - * / %
;;;    (plus num.a num.b num.sum)     -> num.a + num.b = num.sum
;;;    (minus num.a num.b num.diff)   -> num.a - num.b = num.diff
;;;    (mul num.a num.b num.product)  -> num.a * num.b = num.product
;;;    (div num.a num.b num.quotient) -> num.a / num.b = num.quotient
;;;    (rem num.a num.b num.surplus)  -> num.a % num.b = num.surplus
;;;
;;; Comparison Operations: < > <= >= == !=
;;;    (lt num.a num.b) -> num.a < num.b
;;;    (gt num.a num.b) -> num.a > num.b
;;;    (le num.a num.b) -> num.a <= num.b
;;;    (ge num.a num.b) -> num.a >= num.b
;;;    (eq num.a num.b) -> num.a == num.b
;;;    (ne num.a num.b) -> num.a != num.b
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Digit

(i 0)
(i 1)
(i 2)
(i 3)
(i 4)
(i 5)
(i 6)
(i 7)
(i 8)
(i 9)
(i a)
(i b)
(i c)
(i d)
(i e)
(i f)

;;; Numbers / NaN

(<= (num ?i3 ?i2 ?i1 ?i0)
    (i ?i0)
    (i ?i1)
    (i ?i2)
    (i ?i3))
(num nan nan nan nan)

(minnum 0 0 0 0)
(maxnum f f f f)
(nan nan nan nan nan)

;;; Successors

(succi 0 1)
(succi 1 2)
(succi 2 3)
(succi 3 4)
(succi 4 5)
(succi 5 6)
(succi 6 7)
(succi 7 8)
(succi 8 9)
(succi 9 a)
(succi a b)
(succi b c)
(succi c d)
(succi d e)
(succi e f)

(<= (succ ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?j0)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?j0)
    (succi ?i0 ?j0))
(<= (succ ?i3 ?i2 ?i1 f ?i3 ?i2 ?j1 0)
    (num ?i3 ?i2 ?i1 f)
    (num ?i3 ?i2 ?j1 0)
    (succi ?i1 ?j1))
(<= (succ ?i3 ?i2 f f ?i3 ?j2 0 0)
    (num ?i3 ?i2 f f)
    (num ?i3 ?j2 0 0)
    (succi ?i2 ?j2))
(<= (succ ?i3 f f f ?j3 0 0 0)
    (num ?i3 f f f)
    (num ?j3 0 0 0)
    (succi ?i3 ?j3))

;;; Arithmetic Operations

;; Full Adder
; (adder ?a ?b ?x ?s ?c) -> ?a + ?b + ?x = ?c?s
; ?a: input A | ?b: input B | ?x: carry-input | ?s: sum-output | ?c: carry-output

(<= (adder ?a 0 0 ?a 0)
    (i ?a))
(<= (adder f ?b 0 ?bm 1)
    (succi ?bm ?b))
(adder f f 1 f 1)
(<= (adder f f ?x ?xmm 2)
    (succi ?xmm ?xm)
    (succi ?xm ?x))

(<= (adder ?a ?b ?x ?s ?c)
    (succi ?b ?bp)
    (succi ?xm ?x)
    (adder ?a ?bp ?xm ?s ?c))
(<= (adder ?a ?b ?x ?s ?c)
    (succi ?a ?ap)
    (succi ?bm ?b)
    (adder ?ap ?bm ?x ?s ?c))

;; Comparator
; (comparator ?i ?j) -> (?i < ?j)

(<= (comparator ?i ?j)
    (succi ?i ?j))
(<= (comparator ?h ?j)
    (succi ?i ?j)
    (comparator ?h ?i))

;; i + j = s

(<= (plus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (adder ?i0 ?j0 0 ?s0 ?c0)
    (adder ?i1 ?j1 ?c0 ?s1 ?c1)
    (adder ?i2 ?j2 ?c1 ?s2 ?c2)
    (adder ?i3 ?j3 ?c2 ?s3 0))
(<= (plus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 nan nan nan nan)
    (adder ?i0 ?j0 0 ?s0 ?c0)
    (adder ?i1 ?j1 ?c0 ?s1 ?c1)
    (adder ?i2 ?j2 ?c1 ?s2 ?c2)
    (adder ?i3 ?j3 ?c2 ?s3 ?c3)
    (distinct c3 0))
(<= (plus ?i3 ?i2 ?i1 ?i0 nan nan nan nan nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))
(<= (plus nan nan nan nan ?j3 ?j2 ?j1 ?j0 nan nan nan nan)
    (num ?j3 ?j2 ?j1 ?j0))

;; i - j = s
(<= (minus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (plus ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?i3 ?i2 ?i1 ?i0))
(<= (minus ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 nan nan nan nan)
    (plus ?j3 ?j2 ?j1 ?j0 nan nan nan nan nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;; i * j = s
(<= (mul ?i3 ?i2 ?i1 ?i0 0 0 0 0 0 0 0 0)
    (num ?i3 ?i2 ?i1 ?i0))
(<= (mul ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0 ?i3 ?i2 ?i1 ?i0)
    (succ ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0))
(<= (mul ?i3 ?i2 ?i1 ?i0 ?ipp3 ?ipp2 ?ipp1 ?ipp0 ?id3 ?id2 ?id1 ?id0)
    (plus ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0 ?id3 ?id2 ?id1 ?id0)
    (succ ?i3 ?i2 ?i1 ?i0 ?ip3 ?ip2 ?ip1 ?ip0)
    (succ ?ip3 ?ip2 ?ip1 ?ip0 ?ipp3 ?ipp2 ?ipp1 ?ipp0))
(<= (mul ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (plus ?i3 ?i2 ?i1 ?i0 ?jp3 ?jp2 ?jp1 ?jp0 ?sa3 ?sa2 ?sa1 ?sa0)
    (plus ?s3 ?s2 ?s1 ?s0 ?i3 ?i2 ?i1 ?i0 ?sa3 ?sa2 ?sa1 ?sa0)
    (succ ?j3 ?j2 ?j1 ?j0 ?jp3 ?jp2 ?jp1 ?jp0))

;; i / j = s
(<= (div ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0)
    (mul ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?q3 ?q2 ?q1 ?q0)
    (plus ?q3 ?q2 ?q1 ?q0 ?r3 ?r2 ?r1 ?r0 ?i3 ?i2 ?i1 ?i0)
    (not(nan ?r3 ?r2 ?r1 ?r0))
    (lt ?r3 ?r2 ?r1 ?r0 ?s3 ?s2 ?s1 ?s0)
    (not(minnum ?j3 ?j2 ?j1 ?j0)))
(<= (div ?i3 ?i2 ?i1 ?i0 0 0 0 0 nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;; i % j = r
(<= (rem ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0 ?r3 ?r2 ?r1 ?r0)
    (mul ?j3 ?j2 ?j1 ?j0 ?s3 ?s2 ?s1 ?s0 ?q3 ?q2 ?q1 ?q0)
    (plus ?q3 ?q2 ?q1 ?q0 ?r3 ?r2 ?r1 ?r0 ?i3 ?i2 ?i1 ?i0)
    (not(nan ?r3 ?r2 ?r1 ?r0))
    (lt ?r3 ?r2 ?r1 ?r0 ?s3 ?s2 ?s1 ?s0)
    (not(minnum ?j3 ?j2 ?j1 ?j0)))
(<= (rem ?i3 ?i2 ?i1 ?i0 0 0 0 0 nan nan nan nan)
    (num ?i3 ?i2 ?i1 ?i0))

;;; Comparison Operations

;; i < j

(<= (lt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (comparator ?i3 ?j3)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?j3 ?j2 ?j1 ?j0))
(<= (lt ?i3 ?i2 ?i1 ?i0 ?i3 ?j2 ?j1 ?j0)
    (comparator ?i2 ?j2)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?j2 ?j1 ?j0))
(<= (lt ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?j1 ?j0)
    (comparator ?i1 ?j1)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?j1 ?j0))
(<= (lt ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?j0)
    (comparator ?i0 ?j0)
    (num ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?j0))

;; i <= j
(<= (le ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0))
(<= (le ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))

;; i > j
(<= (gt ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (lt ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0))

;; i >= j
(<= (ge ?i3 ?i2 ?i1 ?i0 ?j3 ?j2 ?j1 ?j0)
    (gt ?j3 ?j2 ?j1 ?j0 ?i3 ?i2 ?i1 ?i0))

;; i == j
(<= (eq ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (num ?i3 ?i2 ?i1 ?i0))

;; i != j
(<= (ne ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0)
    (not (eq ?i3 ?i2 ?i1 ?i0 ?i3 ?i2 ?i1 ?i0))
    (num ?i3 ?i2 ?i1 ?i0))

